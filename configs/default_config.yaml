commands:
    # Running Processes
  - command: powershell.exe -Command "Get-WmiObject -Class Win32_Process -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,ProcessName,Handles,Path,Caption,CommandLine,CreationDate,Description,ExecutablePath,ExecutionState,Handle,InstallDate,Name,OSName,ProcessId,ParentProcessId,Priority,SessionId,Status,TerminationDate | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_processes.csv
    merge: csv
    id: processes
    tags: [quick, process, processes, builtin]
    # Windows Services
  - command: powershell.exe -Command "Get-WmiObject -Class Win32_Service -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,Name,Status,ExitCode,DesktopInteract,ErrorControl,PathName,ServiceType,StartMode,AcceptPause,AcceptStop,Caption,CheckPoint,DelayedAutoStart,Description,DisplayName,InstallDate,ProcessId,ServiceSpecificExitCode,Started,StartName,State | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_services.csv
    merge: csv
    id: services
    tags: [quick, persistence, services, builtin]
    # Installed Applications
  - command: powershell.exe -Command "Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* -ErrorAction SilentlyContinue | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},DisplayName,DisplayVersion,Version,NoRemove,ModifyPath,UninstallString,InstallLocation,DisplayIcon,NoRepair,Publisher,InstallDate,VersionMajor,VersionMinor,BundleCachePath,BundleUpgradePath,BundleAddonCode,BundleDetectCode,BundlePatchCode,BundleVersion,BundleProviderKey,BundleTag,EngineVersion,NoElevateOnModify,QuietUninstallString,EstimatedSize,Resume,Installed,InstallSource | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_products.csv
    merge: csv
    id: products
    tags: [quick, persistence, products, builtin]
    # WMI Startup Records
  - command: powershell.exe -Command "Get-WmiObject -Class Win32_StartupCommand -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,Caption,Command,Description,Location,Name,User,UserSID | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_wmi_startups.csv
    merge: csv
    id: wmi_startups
    tags: [quick, persistence, wmi_startups, builtin]
    # TCP Connections
  - command: powershell.exe -Command "Get-WmiObject -Namespace 'root\StandardCimv2' -Class 'MSFT_NetTCPConnection' -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,AggregationBehavior,AppliedSetting,AvailableRequestedStates,Caption,CommunicationStatus,CreationTime,Description,DetailedStatus,Directionality,ElementName,EnabledDefault,EnabledState,HealthState,InstallDate,InstanceID,LocalAddress,LocalPort,Name,OffloadState,OperatingStatus,OperationalStatus,OwningProcess,PrimaryStatus,RemoteAddress,RemotePort,RequestedState,State,Status,TimeOfLastStateChange,TransitioningToState | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_tcp_connections.csv
    merge: csv
    id: tcp_connections
    tags: [quick, network, tcp_connections, builtin]
    # Scheduled Tasks
  - command: powershell.exe -Command "Get-ScheduledTask | Select-Object @{Name='PSComputerName';Expression={$env:COMPUTERNAME}},TaskName, TaskPath, Description, State, Author, SecurityDescriptor, Source, Date, URI, Documentation, @{Name='Actions';Expression={$_.Actions | ForEach-Object {$_.Execute + ' ' + $_.Arguments}}}, @{Name='Triggers';Expression={$_.Triggers | ForEach-Object {$_.ToString()}}}, @{Name='AllowDemandStart';Expression={$_.Settings.AllowDemandStart}}, @{Name='AllowHardTerminate';Expression={$_.Settings.AllowHardTerminate}}, @{Name='Compatibility';Expression={$_.Settings.Compatibility}}, @{Name='DeleteExpiredTaskAfter';Expression={$_.Settings.DeleteExpiredTaskAfter}}, @{Name='DisallowStartIfOnBatteries';Expression={$_.Settings.DisallowStartIfOnBatteries}}, @{Name='ExecutionTimeLimit';Expression={$_.Settings.ExecutionTimeLimit}}, @{Name='Hidden';Expression={$_.Settings.Hidden}}, @{Name='IdleSettings';Expression={$_.Settings.IdleSettings}}, @{Name='MultipleInstances';Expression={$_.Settings.MultipleInstances}}, @{Name='NetworkSettings';Expression={$_.Settings.NetworkSettings}}, @{Name='Priority';Expression={$_.Settings.Priority}}, @{Name='RestartCount';Expression={$_.Settings.RestartCount}}, @{Name='RestartInterval';Expression={$_.Settings.RestartInterval}}, @{Name='RunOnlyIfIdle';Expression={$_.Settings.RunOnlyIfIdle}}, @{Name='RunOnlyIfNetworkAvailable';Expression={$_.Settings.RunOnlyIfNetworkAvailable}}, @{Name='StartWhenAvailable';Expression={$_.Settings.StartWhenAvailable}}, @{Name='StopIfGoingOnBatteries';Expression={$_.Settings.StopIfGoingOnBatteries}}, @{Name='WakeToRun';Expression={$_.Settings.WakeToRun}} | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_scheduled_tasks.csv
    merge: csv
    id: scheduled_tasks
    tags: [quick, persistence, scheduled_tasks, builtin]
    # SMB Shares
  - command: powershell.exe -Command "Get-WmiObject -Namespace 'root\Microsoft\Windows\SMB' -Class MSFT_SmbShare -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,AvailabilityType,CachingMode,CATimeout,ConcurrentUserLimit,ContinuouslyAvailable,CurrentUsers,Description,EncryptData,FolderEnumerationMode,IdentityRemoting,Infrastructure,LeasingMode,Name,Path,Scoped,ScopeName,SecurityDescriptor,ShadowCopy,ShareState,ShareType,SmbInstance,Special,Temporary,Volume | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_smb_shares.csv
    merge: csv
    id: smb_shares
    tags: [quick, network, smb_shares, builtin]
    # DNS Cache
  - command: powershell.exe -Command "Get-WmiObject -Namespace 'root/StandardCimv2' -Class 'MSFT_DNSClientCache' -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,Caption,Data,DataLength,Description,ElementName,Entry,InstanceID,Name,Section,Status,TimeToLive,Type,Qualifiers,Site,Container | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_dns_cache.csv
    merge: csv
    id: dns_cache
    tags: [quick, network, dns_cache, builtin]
    # Installed Hotfixes
  - command: powershell.exe -Command "Get-HotFix -ErrorAction SilentlyContinue | Select * | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_patches.csv
    merge: csv
    id: patches
    tags: [quick, system, patches, builtin]
    # User Sessions
  - command: powershell.exe -Command "quser 2>&1 | ForEach-Object -Process { $_ -replace '\s{2,}',',' } | ConvertFrom-Csv | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_quser.csv
    merge: csv
    id: quser
    tags: [quick, network, quser, builtin]
    # SMB Sessions
  - command: powershell.exe -Command "Get-SmbSession | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},SmbInstance,ClientComputerName,ClientUserName,Dialect,NumOpens,ScopeName,SecondsExists,SecondsIdle,SessionId,TransportName | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_smbsessions.csv
    merge: csv
    id: smbsessions
    tags: [quick, network, smbsessions, builtin]
    # System Information
  - command: powershell.exe -Command "Get-ComputerInfo -ErrorAction SilentlyContinue | Select CsName,WindowsCurrentVersion,WindowsEditionId,WindowsInstallationType,WindowsInstallDateFromRegistry,WindowsProductName,WindowsRegisteredOrganization,WindowsRegisteredOwner,WindowsVersion,BiosCaption,BiosFirmwareType,BiosManufacturer,BiosReleaseDate,BiosVersion,CsAdminPasswordStatus,CsManufacturer,CsName,CsPartOfDomain,CsPCSystemType,CsRoles,OsNameOsType,OsCurrentTimeZone,OsLocale,OsLocalDateTime,OsLastBootUpTime,OsUptime,OsNumberOfUsers,TimeZone,LogonServer,CsUserName | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_systeminfo.csv
    merge: csv
    id: systeminfo
    tags: [quick, system, systeminfo, builtin]
    # ARP Cache
  - command: powershell.exe -Command "Get-NetNeighbor -ErrorAction SilentlyContinue | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_arp_cache.csv
    merge: csv
    id: arp_cache
    tags: [quick, network, arp_cache, builtin]
    # Quick check for recent anomalous files
  - command: powershell.exe -Command "Get-ChildItem -Path $env:HOMEDRIVE\\temp,$env:HOMEDRIVE\\windows\\system32,$env:HOMEDRIVE\\windows\\temp,$env:HOMEDRIVE\\Users,$env:HOMEDRIVE\\programdata -Include *.htm,*.vbs,*.hta,*.chm,*.dll,*.exe,*.bat,*.ps1,*.zip,*.gz,*.7z,*.vba,*.ps,*.psm1,*.docm,*.xlsm,*.pptm,*.potm,*.ppam,*.ppsm,*.sldm,*.dotm,*.xltm,*.xlam,*.lnk,*.vb,*.pdf,*.jar,*.msi,*.msp,*.gadget,*.cmd,*.vbe,*.jsp,*.scr,*.rar,*.msh,*.wsh,*.wsf,*.scf -File -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.CreationTime -lt (Get-Date).AddDays(-$DAYSBACK$) } | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},PSPath,PSParentPath,PSChildName,PSDrive,PSProvider,PSIsContainer,Mode,LinkType,Name,Length,DirectoryName,Directory,IsReadOnly,Exists,FullName,Extension,CreationTime,CreationTimeUtc,LastAccessTime,LastAccessTimeUtc,LastWriteTime,LastWriteTimeUtc | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_recent_suspicious_files.csv
    merge: csv
    tags: [quick, file, long, builtin]
    id: recent_suspicious_files
  # Extract Logons from Security.evtx - By default looks for Network,Batch,Service,NetworkCleartText,NewCredentials and RemoteInteractive
  - command: powershell.exe C:\Windows\temp\ExtractLogons.ps1 -DaysBack $DAYSBACK$ -OutputFile $FILENAME$ -LogonTypes 3,4,5,8,9,10
    file_name: $time$_LogonActivity.csv
    merge: csv
    id: LogonActivity
    tags: [access, user, builtin]
    dependencies: [utilities\ExtractLogons.ps1]
  # Extract ConsoleHostHistory Commands
  - command: powershell.exe C:\Windows\temp\ExtractConsoleHostHistory.ps1 -OutputFile $FILENAME$
    file_name: $time$_ConsoleHostHistory.csv
    merge: csv
    id: ConsoleHostHistory
    tags: [execution,file, powershell, builtin]
    dependencies: [utilities\ExtractConsoleHostHistory.ps1]
  # Extract RDP Activity
  - command: powershell.exe C:\Windows\temp\ExtractRDPActivity.ps1 -DaysBack $DAYSBACK$ -OutputFile $FILENAME$
    file_name: $time$_RDPActivity.csv
    merge: csv
    id: RDPActivity
    tags: [access, rdp, builtin]
    dependencies: [utilities\ExtractRDPActivity.ps1]