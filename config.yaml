preparations:
  - command: powershell.exe -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/EricZimmerman/Get-ZimmermanTools/refs/heads/master/Get-ZimmermanTools.ps1'))"
    note: Download and execute Get-ZimmermanTools into current working directory
  - command: powershell.exe -Command "iwr -Uri 'https://download.sysinternals.com/files/Autoruns.zip' -OutFile .\Autoruns.zip ; Expand-Archive -Path Autoruns.zip -Force"
    note: Download and unzip Autoruns
  - command: powershell.exe -Command "iwr -Uri 'https://raw.githubusercontent.com/joeavanzato/Trawler/refs/heads/main/trawler.ps1' -OutFile .\trawler.ps1"
    note: Download Trawler
commands:
    # Running Processes
  - command: powershell.exe -Command "Get-WmiObject -Class Win32_Process -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,ProcessName,Handles,Path,Caption,CommandLine,CreationDate,Description,ExecutablePath,ExecutionState,Handle,InstallDate,Name,OSName,ProcessId,ParentProcessId,Priority,SessionId,Status,TerminationDate | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_processes.csv
    merge: csv
    id: processes
    tags: [quick, process, processes, builtin]
    # Windows Services
  - command: powershell.exe -Command "Get-WmiObject -Class Win32_Service -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,Name,Status,ExitCode,DesktopInteract,ErrorControl,PathName,ServiceType,StartMode,AcceptPause,AcceptStop,Caption,CheckPoint,DelayedAutoStart,Description,DisplayName,InstallDate,ProcessId,ServiceSpecificExitCode,Started,StartName,State | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_services.csv
    merge: csv
    id: services
    tags: [quick, persistence, services, builtin]
    # Installed Applications
  - command: powershell.exe -Command "Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* -ErrorAction SilentlyContinue | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},DisplayName,DisplayVersion,Version,NoRemove,ModifyPath,UninstallString,InstallLocation,DisplayIcon,NoRepair,Publisher,InstallDate,VersionMajor,VersionMinor,BundleCachePath,BundleUpgradePath,BundleAddonCode,BundleDetectCode,BundlePatchCode,BundleVersion,BundleProviderKey,BundleTag,EngineVersion,NoElevateOnModify,QuietUninstallString,EstimatedSize,Resume,Installed,InstallSource | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_products.csv
    merge: csv
    id: products
    tags: [quick, persistence, products, builtin]
    # WMI Startup Records
  - command: powershell.exe -Command "Get-WmiObject -Class Win32_StartupCommand -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,Caption,Command,Description,Location,Name,User,UserSID | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_wmi_startups.csv
    merge: csv
    id: wmi_startups
    tags: [quick, persistence, wmi_startups, builtin]
    # TCP Connections
  - command: powershell.exe -Command "Get-WmiObject -Namespace 'root\StandardCimv2' -Class 'MSFT_NetTCPConnection' -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,AggregationBehavior,AppliedSetting,AvailableRequestedStates,Caption,CommunicationStatus,CreationTime,Description,DetailedStatus,Directionality,ElementName,EnabledDefault,EnabledState,HealthState,InstallDate,InstanceID,LocalAddress,LocalPort,Name,OffloadState,OperatingStatus,OperationalStatus,OwningProcess,PrimaryStatus,RemoteAddress,RemotePort,RequestedState,State,Status,TimeOfLastStateChange,TransitioningToState | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_tcp_connections.csv
    merge: csv
    id: tcp_connections
    tags: [quick, network, tcp_connections, builtin]
    # Scheduled Tasks
  - command: powershell.exe -Command "Get-ScheduledTask | Select-Object @{Name='PSComputerName';Expression={$env:COMPUTERNAME}},TaskName, TaskPath, Description, State, Author, SecurityDescriptor, Source, Date, URI, Documentation, @{Name='Actions';Expression={$_.Actions | ForEach-Object {$_.Execute + ' ' + $_.Arguments}}}, @{Name='Triggers';Expression={$_.Triggers | ForEach-Object {$_.ToString()}}}, @{Name='AllowDemandStart';Expression={$_.Settings.AllowDemandStart}}, @{Name='AllowHardTerminate';Expression={$_.Settings.AllowHardTerminate}}, @{Name='Compatibility';Expression={$_.Settings.Compatibility}}, @{Name='DeleteExpiredTaskAfter';Expression={$_.Settings.DeleteExpiredTaskAfter}}, @{Name='DisallowStartIfOnBatteries';Expression={$_.Settings.DisallowStartIfOnBatteries}}, @{Name='ExecutionTimeLimit';Expression={$_.Settings.ExecutionTimeLimit}}, @{Name='Hidden';Expression={$_.Settings.Hidden}}, @{Name='IdleSettings';Expression={$_.Settings.IdleSettings}}, @{Name='MultipleInstances';Expression={$_.Settings.MultipleInstances}}, @{Name='NetworkSettings';Expression={$_.Settings.NetworkSettings}}, @{Name='Priority';Expression={$_.Settings.Priority}}, @{Name='RestartCount';Expression={$_.Settings.RestartCount}}, @{Name='RestartInterval';Expression={$_.Settings.RestartInterval}}, @{Name='RunOnlyIfIdle';Expression={$_.Settings.RunOnlyIfIdle}}, @{Name='RunOnlyIfNetworkAvailable';Expression={$_.Settings.RunOnlyIfNetworkAvailable}}, @{Name='StartWhenAvailable';Expression={$_.Settings.StartWhenAvailable}}, @{Name='StopIfGoingOnBatteries';Expression={$_.Settings.StopIfGoingOnBatteries}}, @{Name='WakeToRun';Expression={$_.Settings.WakeToRun}} | Export-Csv -Path '$FILENAME$' -NoTypeInformation"
    file_name: $time$_scheduled_tasks.csv
    merge: csv
    id: scheduled_tasks
    tags: [quick, persistence, scheduled_tasks, builtin]
    # SMB Shares
  - command: powershell.exe -Command "Get-WmiObject -Namespace 'root\Microsoft\Windows\SMB' -Class MSFT_SmbShare -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,AvailabilityType,CachingMode,CATimeout,ConcurrentUserLimit,ContinuouslyAvailable,CurrentUsers,Description,EncryptData,FolderEnumerationMode,IdentityRemoting,Infrastructure,LeasingMode,Name,Path,Scoped,ScopeName,SecurityDescriptor,ShadowCopy,ShareState,ShareType,SmbInstance,Special,Temporary,Volume | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_smb_shares.csv
    merge: csv
    id: smb_shares
    tags: [quick, network, smb_shares, builtin]
    # DNS Cache
  - command: powershell.exe -Command "Get-WmiObject -Namespace 'root/StandardCimv2' -Class 'MSFT_DNSClientCache' -Locale MS_409 -ErrorAction SilentlyContinue | Select PSComputerName,Caption,Data,DataLength,Description,ElementName,Entry,InstanceID,Name,Section,Status,TimeToLive,Type,Qualifiers,Site,Container | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_dns_cache.csv
    merge: csv
    id: dns_cache
    tags: [quick, network, dns_cache, builtin]
    # Installed Hotfixes
  - command: powershell.exe -Command "Get-HotFix -ErrorAction SilentlyContinue | Select * | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_patches.csv
    merge: csv
    id: patches
    tags: [quick, system, patches, builtin]
    # User Sessions
  - command: powershell.exe -Command "quser 2>&1 | ForEach-Object -Process { $_ -replace '\s{2,}',',' } | ConvertFrom-Csv | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_quser.csv
    merge: csv
    id: quser
    tags: [quick, network, quser, builtin]
    # SMB Sessions
  - command: powershell.exe -Command "Get-SmbSession | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},SmbInstance,ClientComputerName,ClientUserName,Dialect,NumOpens,ScopeName,SecondsExists,SecondsIdle,SessionId,TransportName | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_smbsessions.csv
    merge: csv
    id: smbsessions
    tags: [quick, network, smbsessions, builtin]
    # System Information
  - command: powershell.exe -Command "Get-ComputerInfo -ErrorAction SilentlyContinue | Select CsName,WindowsCurrentVersion,WindowsEditionId,WindowsInstallationType,WindowsInstallDateFromRegistry,WindowsProductName,WindowsRegisteredOrganization,WindowsRegisteredOwner,WindowsVersion,BiosCaption,BiosFirmwareType,BiosManufacturer,BiosReleaseDate,BiosVersion,CsAdminPasswordStatus,CsManufacturer,CsName,CsPartOfDomain,CsPCSystemType,CsRoles,OsNameOsType,OsCurrentTimeZone,OsLocale,OsLocalDateTime,OsLastBootUpTime,OsUptime,OsNumberOfUsers,TimeZone,LogonServer,CsUserName | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_systeminfo.csv
    merge: csv
    id: systeminfo
    tags: [quick, system, systeminfo, builtin]
    # Firewall Rules
  - command: powershell.exe -Command "Get-NetFirewallRule -ErrorAction SilentlyContinue | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_firewall_rules.csv
    merge: csv
    id: firewall_rules
    tags: [quick, network, firewall_rules, builtin]
    # ARP Cache
  - command: powershell.exe -Command "Get-NetNeighbor -ErrorAction SilentlyContinue | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_arp_cache.csv
    merge: csv
    id: arp_cache
    tags: [quick, network, arp_cache, builtin]
    # Trawler - a persistence hunting utility - like PersistenceSniper
  - command: powershell.exe -Command "Add-MpPreference -ExclusionPath "C:\Windows\Temp\trawler.ps1" -Force" & powershell.exe C:\Windows\temp\trawler.ps1 -csvfilename '$FILENAME$' -daysago $DAYSBACK$ -OutputLocation 'C:\Windows\temp' -ScanOptions ActiveSetup,AMSIProviders,AppCertDLLs,AppInitDLLs,ApplicationShims,AppPaths,AssociationHijack,AutoDialDLL,BIDDll,BITS,BootVerificationProgram,COMHijacks,CommandAutoRunProcessors,Connections,ContextMenu,ChromiumExtensions,DebuggerHijacks,DNSServerLevelPluginDLL,DisableLowIL,DirectoryServicesRestoreMode,DiskCleanupHandlers,ErrorHandlerCMD,ExplorerHelperUtilities,FolderOpen,GPOExtensions,GPOScripts,HTMLHelpDLL,IFEO,InstalledSoftware,InternetSettingsLUIDll,KnownManagedDebuggers,LNK,LSA,MicrosoftTelemetryCommands,ModifiedWindowsAccessibilityFeature,MSDTCDll,Narrator,NaturalLanguageDevelopmentDLLs,NetSHDLLs,NotepadPPPlugins,OfficeAI,OfficeGlobalDotName,Officetest,OfficeTrustedLocations,OfficeTrustedDocuments,OutlookStartup,PATHHijacks,PeerDistExtensionDll,PolicyManager,PowerShellProfiles,PrintMonitorDLLs,PrintProcessorDLLs,RATS,RDPShadowConsent,RDPStartupPrograms,RemoteUACSetting,ScheduledTasks,ScreenSaverEXE,ServiceControlManagerSD,SEMgrWallet,ServiceHijacks,Services,SethcHijack,SilentProcessExitMonitoring,Startups,SuspiciousFileLocation,TerminalProfiles,TerminalServicesDLL,TerminalServicesInitialProgram,TimeProviderDLLs,TrustProviderDLL,UninstallStrings,UserInitMPRScripts,Users,UtilmanHijack,WellKnownCOM,WERRuntimeExceptionHandlers,WindowsLoadKey,WindowsUnsignedFiles,WindowsUpdateTestDlls,WinlogonHelperDLLs,WMIConsumers,Wow64LayerAbuse,WSL & powershell.exe -Command "Remove-MpPreference -ExclusionPath "C:\Windows\Temp\trawler.ps1" -Force"
    file_name: $time$_trawler.csv
    merge: csv
    id: trawler
    tags: [persistence, trawler, external]
    dependencies: [https://raw.githubusercontent.com/joeavanzato/Trawler/refs/heads/main/trawler.ps1]
    # Quick check for recent anomalous files
  - command: powershell.exe -Command "Get-ChildItem -Path $env:HOMEDRIVE\\temp,$env:HOMEDRIVE\\windows\\system32,$env:HOMEDRIVE\\windows\\temp,$env:HOMEDRIVE\\Users,$env:HOMEDRIVE\\programdata -Include *.htm,*.vbs,*.hta,*.chm,*.dll,*.exe,*.bat,*.ps1,*.zip,*.gz,*.7z,*.vba,*.ps,*.psm1,*.docm,*.xlsm,*.pptm,*.potm,*.ppam,*.ppsm,*.sldm,*.dotm,*.xltm,*.xlam,*.lnk,*.vb,*.pdf,*.jar,*.msi,*.msp,*.gadget,*.cmd,*.vbe,*.jsp,*.scr,*.rar,*.msh,*.wsh,*.wsf,*.scf -File -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.CreationTime -lt (Get-Date).AddDays(-$DAYSBACK$) } | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},PSPath,PSParentPath,PSChildName,PSDrive,PSProvider,PSIsContainer,Mode,LinkType,Name,Length,DirectoryName,Directory,IsReadOnly,Exists,FullName,Extension,CreationTime,CreationTimeUtc,LastAccessTime,LastAccessTimeUtc,LastWriteTime,LastWriteTimeUtc | Export-Csv -NoTypeInformation -Path '$FILENAME$'"
    file_name: $time$_recent_suspicious_files.csv
    merge: csv
    tags: [quick, file, long, builtin]
    id: recent_suspicious_files
    # PECmd
  - command: C:\Windows\Temp\PECmd.exe -d C:\Windows\Prefetch --csv C:\Windows\temp --csvf $FILENAME$ && powershell.exe -Command "$data = Import-CSV -Path $FILENAME$; $data | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-CSV -Path $FILENAME$ -NoTypeInformation"
    file_name: $time$_PECmd.csv
    merge: csv
    id: PECmd
    tags: [quick, process, execution, eztools, pecmd, external]
    dependencies: [net6\PECmd.dll,net6\PECmd.exe,net6\PECmd.runtimeconfig.json]
    # TODO - Cleanup DFIR Batch - into single dir
    # DFIR Batch for C:\Users
  - command: C:\Windows\Temp\net6\RECmd\RECmd.exe -d C:\Users --csv C:\Windows\Temp --csvf $FILENAME$ --bn C:\Windows\Temp\net6\RECmd\BatchExamples\DFIRBatch.reb && powershell.exe -Command "$data = Import-CSV -Path $FILENAME$; $data | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-CSV -Path $FILENAME$ -NoTypeInformation"
    file_name: $time$_RECmd_DFIRBatch_Users.csv
    merge: csv
    id: RECmd_DFIRBatch_Users
    tags: [reg, eztools, recmd, external]
    dependencies: [net6\RECmd]
    # DFIR Batch for C:\Windows
  - command: C:\Windows\Temp\net6\RECmd\RECmd.exe -d C:\Windows --csv C:\Windows\Temp --csvf $FILENAME$ --bn C:\Windows\Temp\net6\RECmd\BatchExamples\DFIRBatch.reb && powershell.exe -Command "$data = Import-CSV -Path $FILENAME$; $data | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-CSV -Path $FILENAME$ -NoTypeInformation"
    file_name: $time$_RECmd_DFIRBatch_Windows.csv
    merge: csv
    id: RECmd_DFIRBatch_Windows
    tags: [reg, eztools, recmd, external]
    dependencies: [net6\RECmd]
  # LECmd
  - command: C:\Windows\Temp\LECmd.exe -q -d C:\Users --csv C:\Windows\temp --csvf $FILENAME$  && powershell.exe -Command "$data = Import-CSV -Path $FILENAME$; $data | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-CSV -Path $FILENAME$ -NoTypeInformation"
    file_name: $time$_LECmd.csv
    merge: csv
    id: LECmd
    tags: [file, quick, execution, eztools, lecmd, external]
    dependencies: [net6\LECmd.dll,net6\LECmd.exe,net6\LECmd.runtimeconfig.json]
  # JLECmd
  - command: C:\Windows\Temp\JLECmd.exe -q -d C:\Users --csv C:\Windows\temp\$DIRNAME$ --csvf $FILENAME$ && powershell.exe C:\Windows\temp\CSVMerge.ps1 -addhostname -directory C:\Windows\temp\$DIRNAME$ -outputFile $FILENAME$
    dir_name: $time$_JLE
    file_name: $time$_JLECmd.csv
    merge: csv
    id: JLECmd
    tags: [file, quick, execution, eztools, jlecmd, external]
    dependencies: [net6\JLECmd.dll,net6\JLECmd.exe,net6\JLECmd.runtimeconfig.json,utilities\CSVMerge.ps1]
  # Amcache
  - command: C:\Windows\Temp\AmcacheParser.exe -i -f C:\Windows\AppCompat\Programs\Amcache.hve --csv C:\Windows\temp\$DIRNAME$ && powershell.exe C:\Windows\temp\CSVMerge.ps1 -addhostname -directory C:\Windows\temp\$DIRNAME$ -outputFile $FILENAME$
    dir_name: $time$_AmcacheParser
    file_name: $time$_AmcacheParser_Merged.csv
    merge: csv
    id: AmcacheParser
    tags: [execution, quick, eztools, amcache, external]
    dependencies: [net6\AmcacheParser.dll,net6\AmcacheParser.exe,net6\AmcacheParser.runtimeconfig.json,utilities\CSVMerge.ps1]
  # AppCompatCache
  - command: C:\Windows\Temp\AppCompatCacheParser.exe --csv C:\Windows\temp\ --csvf $FILENAME$ && powershell.exe -Command "$data = Import-CSV -Path $FILENAME$; $data | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-CSV -Path $FILENAME$ -NoTypeInformation"
    file_name: $time$_AppCompatCacheParser.csv
    merge: csv
    id: AppCompatCacheParser
    tags: [execution, quick, eztools, appcompatcache, external]
    dependencies: [net6\AppCompatCacheParser.dll,net6\AppCompatCacheParser.exe,net6\AppCompatCacheParser.runtimeconfig.json]
  # WxTCmd
  - command: powershell.exe -Command "$files = Get-ChildItem -Path 'C:\Users\*\AppData\Local\ConnectedDevicesPlatform\*\ActivitiesCache.db' -Recurse;foreach ($f in $files){cmd.exe /c C:\Windows\Temp\WxTCmd.exe -f "$($f.FullName)" --csv C:\Windows\Temp\$DIRNAME$}" && powershell.exe C:\Windows\temp\CSVMerge.ps1 -addhostname -directory C:\Windows\temp\$DIRNAME$ -outputFile $FILENAME$
    dir_name: $time$_WxTCmd
    file_name: $time$_WxTCmd_Merged.csv
    merge: none
    id: WxTCmd
    tags: [execution, quick, eztools, wxtcmd, external]
    dependencies: [net6\WxTCmd.dll,net6\WxTCmd.exe,net6\WxTCmd.runtimeconfig.json]
  # Autoruns
  - command: C:\Windows\Temp\autorunsc.exe -a * -c -o $FILENAME$ && powershell.exe -Command "$data = Import-CSV -Path $FILENAME$; $data | Select-Object -Property @{name='PSComputerName'; expression={ $env:COMPUTERNAME }},* | Export-CSV -Path $FILENAME$ -NoTypeInformation"
    file_name: $time$_Autoruns.csv
    merge: csv
    id: Autoruns
    tags: [persistence, quick, autoruns, external]
    dependencies: [Autoruns\autorunsc.exe,Autoruns\autorunsc64.exe]
  # Extract Logons from Security.evtx - By default looks for Network,Batch,Service,NetworkCleartText,NewCredentials and RemoteInteractive
  - command: powershell.exe C:\Windows\temp\ExtractLogons.ps1 -DaysBack $DAYSBACK$ -OutputFile $FILENAME$ -LogonTypes 3,4,5,8,9,10
    file_name: $time$_LogonActivity.csv
    merge: csv
    id: LogonActivity
    tags: [access, user, builtin]
    dependencies: [utilities\ExtractLogons.ps1]
  # Extract ConsoleHostHistory Commands
  - command: powershell.exe C:\Windows\temp\ExtractConsoleHostHistory.ps1 -OutputFile $FILENAME$
    file_name: $time$_ConsoleHostHistory.csv
    merge: csv
    id: ConsoleHostHistory
    tags: [execution,file, powershell, builtin]
    dependencies: [utilities\ExtractConsoleHostHistory.ps1]
  # Extract RDP Activity
  - command: powershell.exe C:\Windows\temp\ExtractRDPActivity.ps1 -DaysBack $DAYSBACK$ -OutputFile $FILENAME$
    file_name: $time$_RDPActivity.csv
    merge: csv
    id: RDPActivity
    tags: [access, rdp, builtin]
    dependencies: [utilities\ExtractRDPActivity.ps1]
  # Extract PowerShell Script Blocks
  - command: powershell.exe C:\Windows\temp\ExtractScriptBlockLogging.ps1 -DaysBack $DAYSBACK$ -OutputFile $FILENAME$
    file_name: $time$_ScriptBlockLogging.csv
    merge: csv
    id: ScriptBlockLogging
    tags: [access, powershell, builtin]
    dependencies: [utilities\ExtractScriptBlockLogging.ps1]